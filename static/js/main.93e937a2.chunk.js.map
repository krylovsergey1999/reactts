{"version":3,"sources":["components/navbar/index.js","components/navbar/navbar.tsx","components/todo-form/todo-form.tsx","components/todo-list/todo-list.tsx","pages/TodoPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","to","ToDoForm","props","ref","useRef","onKeyPress","event","key","onAdd","current","value","type","id","placeholder","htmlFor","ToDoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","bind","title","onClick","preventDefault","removeHandler","TodoPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","console","log","newToDo","Date","now","prev","window","confirm","filter","AboutPage","history","useHistory","App","basename","component","path","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93e937a2.chunk.js","sourcesContent":["import Navbar from \"./navbar\";\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper indigo px1\">\r\n                <NavLink to=\"/\" className=\"brand-logo\">React + Typescript</NavLink>\r\n                <ul className=\"right hide-on-med-and-down\">\r\n                    <li><NavLink to=\"/\">Список дел</NavLink></li>\r\n                    <li><NavLink to=\"/about\">О нас</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\nexport default Navbar;\r\n","import React,{useRef} from 'react'\r\nimport './todo-form.css';\r\n\r\ninterface ToDoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\nconst ToDoForm: React.FC<ToDoFormProps> = (props) => {\r\n    // const [title, setTitle] = useState<string>('');\r\n    //\r\n    // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(event.target.value);\r\n    // };\r\n    const ref = useRef<HTMLInputElement>(null);\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n            // console.log(title);\r\n            // setTitle('');\r\n            props.onAdd(ref.current!.value);\r\n            ref.current!.value = '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-field mt2\">\r\n            <input\r\n                // value={title}\r\n                // onChange={changeHandler}\r\n                ref={ref}\r\n                onKeyPress={keyPressHandler}\r\n                type=\"text\"\r\n                id=\"title\"\r\n                placeholder=\"Введите название дела\"/>\r\n            <label htmlFor=\"title\" className=\"active\">\r\n                Введите название дела\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ToDoForm;\r\n","import React from 'react';\r\nimport './todo-list.css';\r\nimport {IToDo} from \"../interfaces\";\r\n\r\ntype TodoListProps = {\r\n    todos: IToDo[],\r\n    onToggle(id: number): void,  // специально показано два способа задания функций в компонент\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nconst ToDoList: React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\r\n    if (todos.length === 0) {\r\n        return <p className=\"center\">Пока дел нет</p>\r\n    }\r\n\r\n    const removeHandler = (event: React.MouseEvent, id: number) => {\r\n        event.preventDefault();\r\n\r\n        onRemove(id);\r\n    };\r\n\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n                const classes = ['todo'];\r\n\r\n                if (todo.completed) {\r\n                    classes.push('completed');\r\n                }\r\n\r\n                return (\r\n                    <li className={classes.join(' ')} key={todo.id}>\r\n                        <label>\r\n                            <input type=\"checkbox\" checked={todo.completed} onChange={onToggle.bind(null, todo.id)}/>\r\n                            <span>{todo.title}</span>\r\n                            <i\r\n                                className=\"material-icons red-text\"\r\n                                onClick={(event) => removeHandler(event, todo.id)}\r\n                            >delete</i>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\n\r\nexport default ToDoList;\r\n","import React, {useEffect, useState} from 'react';\r\nimport ToDoForm from \"../components/todo-form/todo-form\";\r\nimport ToDoList from \"../components/todo-list/todo-list\";\r\nimport {IToDo} from \"../components/interfaces\";\r\n\r\nconst TodoPage: React.FC = () => {\r\n    const [todos, setTodos] = useState<IToDo[]>([]);\r\n\r\n    useEffect(() => {\r\n        const saved: IToDo[] = JSON.parse(localStorage.getItem('todos') || '[]') as IToDo[];\r\n        setTodos(saved);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n    const addHanler = (title: string) => {\r\n        console.log('add new todo', title);\r\n        const newToDo: IToDo = {\r\n            title: title,\r\n            id: Date.now(),\r\n            completed: false\r\n        };\r\n        // setTodos([newToDo, ...todos]) - не лучший код т.к асинхронность может накосячить\r\n        setTodos(prev => [newToDo, ...prev])\r\n    };\r\n\r\n    const toggleHandler = (id: number) => {\r\n        setTodos(prev => prev.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        }))\r\n    };\r\n\r\n    const removeHandler = (id: number) => {\r\n        const shoudRemove = window.confirm('Вы уверены что хотите удалить элемент?');\r\n        if (shoudRemove) {\r\n            setTodos(prev => prev.filter(todo => todo.id !== id))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ToDoForm onAdd={addHanler}/>\r\n            <ToDoList todos={todos} onRemove={removeHandler} onToggle={toggleHandler}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoPage;\r\n","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst AboutPage: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            <h1>Страница информации</h1>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid animi autem corporis delectus\r\n                doloremque eligendi facilis ipsam magnam odio quidem. Ab at corporis cumque eveniet impedit ipsa nisi\r\n                rem rerum!</p>\r\n            <button\r\n                className=\"btn\"\r\n                onClick={() => history.push('/')}\r\n            >\r\n                Обратно к списку дел\r\n            </button>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\nimport Navbar from './components/navbar';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport TodoPage from \"./pages/TodoPage\";\nimport AboutPage from \"./pages/AboutPage\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter basename=\"https://krylovsergey1999.github.io/reactts\">\n            <Navbar/>\n            <div className=\"container\">\n                <Switch>\n                    <Route component={TodoPage} path=\"/\" exact />\n                    <Route component={AboutPage} path=\"/about\"/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}